"use strict";
const chalk = require("chalk");
const yargs = require("yargs");
const index_1 = require("../dist/utils/index");
const bus_listener_1 = require("../dist/bus-listener");
const util_1 = require("util");
const argv = yargs.usage('Usage $0 -s <ip address> -g <group address>')
    .demand(['server', 'groupAddress'])
    .alias('s', 'server')
    .alias('p', 'port')
    .alias('g', 'groupAddress')
    .alias('h', 'help')
    .default('port', 3671)
    .describe('server', 'Remote ip address')
    .describe('port', 'Remote port number')
    .describe('groupAddress', 'Group address to issue the read telegram to')
    .coerce('server', (ip) => {
    if (!index_1.isIPv4(ip)) {
        throw new Error(`Invalid ip address ${ip}`);
    }
    return ip;
})
    .coerce('port', (port) => {
    const portNumber = +port;
    if (portNumber < 0 || 65535 < portNumber) {
        throw new Error(`Invalid port number ${portNumber}`);
    }
    return portNumber;
})
    .check((args) => {
    if (!index_1.isKnxAddress(args.groupAddress)) {
        throw new Error(`Invalid group address ${args.groupAddress}`);
    }
    return true;
})
    .example('$0 -s 10.10.10.0 -g 0/0/1', 'Will send read telegram to 0/0/1 group address on 10.10.10.0 knx gateway')
    .epilog(util_1.format('GitHub: %s', chalk.underline('https://github.com/crabicode/knx-listener')))
    .help('help').argv;
const server = new bus_listener_1.BusListener();
const die = () => {
    return server.disconnect().then(() => process.exit(), () => process.exit());
};
const fail = (format, ...param) => {
    console.error(chalk.red(`[ FAIL ]`) + ` ${util_1.format(format, ...param)}`);
    die();
};
const ok = (format, ...param) => {
    console.error(chalk.green(`[ OK ]`) + ` ${util_1.format(format, ...param)}`);
    die();
};
process.on('SIGINT', die);
server.bind(argv.server, argv.port).catch((err) => {
    fail('Failed to send request to %s:%d due to %s', argv.server, argv.port, err.code);
});
server.ready(() => {
    server.read(index_1.knxAddr2num(argv.groupAddress)).then((res) => {
        const responder = index_1.num2knxAddr(res.source, false);
        const ga = index_1.num2knxAddr(res.dest);
        const data = Buffer.from([...res.data]).toString('hex').match(/.{1,2}/g).join(' ');
        ok('%s responds to %s with %s data', responder, ga, data);
        setImmediate(() => {
            server.disconnect();
        });
    }).catch((_err) => {
        fail(`No response received for read telegram to %s`, chalk.underline(argv.groupAddress));
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JvdXBzcmVhZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImdyb3Vwc3JlYWQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLCtCQUErQjtBQUMvQiwrQkFBK0I7QUFDL0IsK0NBQXFGO0FBQ3JGLHVEQUFtRDtBQUNuRCwrQkFBMkM7QUFFM0MsTUFBTSxJQUFJLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyw2Q0FBNkMsQ0FBQztLQUNwRSxNQUFNLENBQUMsQ0FBQyxRQUFRLEVBQUUsY0FBYyxDQUFDLENBQUM7S0FDbEMsS0FBSyxDQUFDLEdBQUcsRUFBRSxRQUFRLENBQUM7S0FDcEIsS0FBSyxDQUFDLEdBQUcsRUFBRSxNQUFNLENBQUM7S0FDbEIsS0FBSyxDQUFDLEdBQUcsRUFBRSxjQUFjLENBQUM7S0FDMUIsS0FBSyxDQUFDLEdBQUcsRUFBRSxNQUFNLENBQUM7S0FDbEIsT0FBTyxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUM7S0FDckIsUUFBUSxDQUFDLFFBQVEsRUFBRSxtQkFBbUIsQ0FBQztLQUN2QyxRQUFRLENBQUMsTUFBTSxFQUFFLG9CQUFvQixDQUFDO0tBQ3RDLFFBQVEsQ0FBQyxjQUFjLEVBQUUsNkNBQTZDLENBQUM7S0FDdkUsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDLEVBQVU7SUFDM0IsRUFBRSxDQUFDLENBQUMsQ0FBQyxjQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2hCLE1BQU0sSUFBSSxLQUFLLENBQUMsc0JBQXNCLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDOUMsQ0FBQztJQUNELE1BQU0sQ0FBQyxFQUFFLENBQUM7QUFDWixDQUFDLENBQUM7S0FDRCxNQUFNLENBQUMsTUFBTSxFQUFFLENBQUMsSUFBWTtJQUMzQixNQUFNLFVBQVUsR0FBRyxDQUFDLElBQUksQ0FBQztJQUN6QixFQUFFLENBQUMsQ0FBQyxVQUFVLEdBQUcsQ0FBQyxJQUFJLEtBQUssR0FBRyxVQUFVLENBQUMsQ0FBQyxD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TSxDQUFDLFVBQVUsRUFBRSxDQUFDO1FBQ3RCLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSTtRQUNaLElBQUksQ0FBQyw4Q0FBOEMsRUFDakQsS0FBSyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQztJQUN4QyxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgY2hhbGsgZnJvbSAnY2hhbGsnO1xuaW1wb3J0ICogYXMgeWFyZ3MgZnJvbSAneWFyZ3MnO1xuaW1wb3J0IHsgaXNJUHY0LCBrbnhBZGRyMm51bSwgbnVtMmtueEFkZHIsIGlzS254QWRkcmVzcyB9IGZyb20gJy4uL2Rpc3QvdXRpbHMvaW5kZXgnO1xuaW1wb3J0IHsgQnVzTGlzdGVuZXIgfSBmcm9tICcuLi9kaXN0L2J1cy1saXN0ZW5lcic7XG5pbXBvcnQgeyBmb3JtYXQgYXMgc3RyRm9ybWF0IH0gZnJvbSAndXRpbCc7XG5cbmNvbnN0IGFyZ3YgPSB5YXJncy51c2FnZSgnVXNhZ2UgJDAgLXMgPGlwIGFkZHJlc3M+IC1nIDxncm91cCBhZGRyZXNzPicpXG4gIC5kZW1hbmQoWydzZXJ2ZXInLCAnZ3JvdXBBZGRyZXNzJ10pXG4gIC5hbGlhcygncycsICdzZXJ2ZXInKVxuICAuYWxpYXMoJ3AnLCAncG9ydCcpXG4gIC5hbGlhcygnZycsICdncm91cEFkZHJlc3MnKVxuICAuYWxpYXMoJ2gnLCAnaGVscCcpXG4gIC5kZWZhdWx0KCdwb3J0JywgMzY3MSlcbiAgLmRlc2NyaWJlKCdzZXJ2ZXInLCAnUmVtb3RlIGlwIGFkZHJlc3MnKVxuICAuZGVzY3JpYmUoJ3BvcnQnLCAnUmVtb3RlIHBvcnQgbnVtYmVyJylcbiAgLmRlc2NyaWJlKCdncm91cEFkZHJlc3MnLCAnR3JvdXAgYWRkcmVzcyB0byBpc3N1ZSB0aGUgcmVhZCB0ZWxlZ3JhbSB0bycpXG4gIC5jb2VyY2UoJ3NlcnZlcicsIChpcDogc3RyaW5nKSA9PiB7XG4gICAgaWYgKCFpc0lQdjQoaXApKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgaXAgYWRkcmVzcyAke2lwfWApO1xuICAgIH1cbiAgICByZXR1cm4gaXA7XG4gIH0pXG4gIC5jb2VyY2UoJ3BvcnQnLCAocG9ydDogc3RyaW5nKSA9PiB7XG4gICAgY29uc3QgcG9ydE51bWJlciA9ICtwb3J0O1xuICAgIGlmIChwb3J0TnVtYmVyIDwgMCB8fCA2NTUzNSA8IHBvcnROdW1iZXIpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBwb3J0IG51bWJlciAke3BvcnROdW1iZXJ9YCk7XG4gICAgfVxuICAgIHJldHVybiBwb3J0TnVtYmVyO1xuICB9KVxuICAuY2hlY2soKGFyZ3MpID0+IHtcbiAgICBpZiAoIWlzS254QWRkcmVzcyhhcmdzLmdyb3VwQWRkcmVzcykpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBncm91cCBhZGRyZXNzICR7YXJncy5ncm91cEFkZHJlc3N9YCk7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9KVxuICAuZXhhbXBsZSgnJDAgLXMgMTAuMTAuMTAuMCAtZyAwLzAvMScsICdXaWxsIHNlbmQgcmVhZCB0ZWxlZ3JhbSB0byAwLzAvMSBncm91cCBhZGRyZXNzIG9uIDEwLjEwLjEwLjAga254IGdhdGV3YXknKVxuICAuZXBpbG9nKHN0ckZvcm1hdCgnR2l0SHViOiAlcycsIGNoYWxrLnVuZGVybGluZSgnaHR0cHM6Ly9naXRodWIuY29tL2NyYWJpY29kZS9rbngtbGlzdGVuZXInKSkpXG4gIC5oZWxwKCdoZWxwJykuYXJndjtcblxuY29uc3Qgc2VydmVyID0gbmV3IEJ1c0xpc3RlbmVyKCk7XG5cbmNvbnN0IGRpZSA9ICgpID0+IHtcbiAgcmV0dXJuIHNlcnZlci5kaXNjb25uZWN0KCkudGhlbihcbiAgICAoKSA9PiBwcm9jZXNzLmV4aXQoKSxcbiAgICAoKSA9PiBwcm9jZXNzLmV4aXQoKSxcbiAgKTtcbn07XG5cbmNvbnN0IGZhaWwgPSAoZm9ybWF0OiBhbnksIC4uLnBhcmFtOiBhbnlbXSkgPT4ge1xuICBjb25zb2xlLmVycm9yKFxuICAgIGNoYWxrLnJlZChgWyBGQUlMIF1gKSArIGAgJHtzdHJGb3JtYXQoZm9ybWF0LCAuLi5wYXJhbSl9YCxcbiAgKTtcbiAgZGllKCk7XG59O1xuXG5jb25zdCBvayA9IChmb3JtYXQ6IGFueSwgLi4ucGFyYW06IGFueVtdKSA9PiB7XG4gIGNvbnNvbGUuZXJyb3IoXG4gICAgY2hhbGsuZ3JlZW4oYFsgT0sgXWApICsgYCAke3N0ckZvcm1hdChmb3JtYXQsIC4uLnBhcmFtKX1gLFxuICApO1xuICBkaWUoKTtcbn07XG5cbnByb2Nlc3Mub24oJ1NJR0lOVCcsIGRpZSk7IC8vIENsb3NlIHR1bm5lbGluZyBvbiBjdHJsK2Ncblxuc2VydmVyLmJpbmQoYXJndi5zZXJ2ZXIsIGFyZ3YucG9ydCkuY2F0Y2goKGVycikgPT4ge1xuICBmYWlsKCdGYWlsZWQgdG8gc2VuZCByZXF1ZXN0IHRvICVzOiVkIGR1ZSB0byAlcycsIGFyZ3Yuc2VydmVyLCBhcmd2LnBvcnQsIGVyci5jb2RlKTtcbn0pO1xuXG5zZXJ2ZXIucmVhZHkoKCkgPT4ge1xuICBzZXJ2ZXIucmVhZChrbnhBZGRyMm51bShhcmd2Lmdyb3VwQWRkcmVzcykpLnRoZW4oKHJlcykgPT4ge1xuICAgIGNvbnN0IHJlc3BvbmRlciA9IG51bTJrbnhBZGRyKHJlcy5zb3VyY2UsIGZhbHNlKTtcbiAgICBjb25zdCBnYSA9IG51bTJrbnhBZGRyKHJlcy5kZXN0KTtcbiAgICBjb25zdCBkYXRhID0gQnVmZmVyLmZyb20oWy4uLnJlcy5kYXRhXSkudG9TdHJpbmcoJ2hleCcpLm1hdGNoKC8uezEsMn0vZykuam9pbignICcpO1xuICAgIG9rKCclcyByZXNwb25kcyB0byAlcyB3aXRoICVzIGRhdGEnLCByZXNwb25kZXIsIGdhLCBkYXRhKTtcbiAgICBzZXRJbW1lZGlhdGUoKCkgPT4ge1xuICAgICAgLy8gc2NoZWR1bGUgZGlzY29ubmVjdCBvbiB0aGUgbmV4dCBldmVudCBjeWNsZVxuICAgICAgc2VydmVyLmRpc2Nvbm5lY3QoKTtcbiAgICB9KTtcbiAgfSkuY2F0Y2goKF9lcnIpID0+IHtcbiAgICBmYWlsKGBObyByZXNwb25zZSByZWNlaXZlZCBmb3IgcmVhZCB0ZWxlZ3JhbSB0byAlc2AsXG4gICAgICBjaGFsay51bmRlcmxpbmUoYXJndi5ncm91cEFkZHJlc3MpKTtcbiAgfSk7XG59KTtcbiJdfQ==
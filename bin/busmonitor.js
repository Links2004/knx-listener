"use strict";
const yargs = require("yargs");
const chalk = require("chalk");
const bus_listener_1 = require("../dist/bus-listener");
const index_1 = require("../dist/utils/index");
const util_1 = require("util");
const argv = yargs.usage('Usage $0 -s <ip address>')
    .demand(['server'])
    .alias('p', 'port')
    .alias('s', 'server')
    .alias('t', 'timeout')
    .default('port', 3671)
    .default('timeout', 0)
    .describe('server', 'Remote ip address')
    .describe('port', 'Remote port number')
    .describe('t', 'Seconds to retry, 0 - fail on first attemp')
    .help('help')
    .alias('h', 'help')
    .coerce('server', (ip) => {
    if (!index_1.isIPv4(ip)) {
        throw new Error(`Invalid ip address ${ip}`);
    }
    return ip;
})
    .coerce('port', (port) => {
    const portNumber = +port;
    if (portNumber < 0 || 65535 < portNumber) {
        throw new Error(`Invalid port number ${portNumber}`);
    }
    return portNumber;
})
    .coerce('timeout', (timeout) => {
    return ((+timeout) >>> 0) * 1000;
})
    .example('$0 -s 10.10.10.0', 'Will listen bus through 10.10.10.0 knx gateway')
    .epilog(util_1.format('GitHub: %s', chalk.underline('https://github.com/crabicode/knx-listener')))
    .argv;
console.log(`Listening ${argv.server}:${argv.port}`);
const server = new bus_listener_1.BusListener();
const die = () => {
    return server.disconnect().then(() => process.exit(), () => process.exit());
};
const fail = (format, ...param) => {
    console.error(chalk.red(`[ FAIL ]`) + ` ${util_1.format(format, ...param)}`);
};
const ok = (format, ...param) => {
    console.error(chalk.green(`[ OK ]`) + ` ${util_1.format(format, ...param)}`);
};
process.on('SIGINT', die);
server.bind(argv.server, argv.port, {
    timeout: argv.timeout,
    onFailure: (err) => {
        fail('Error ocurred while connecting %s', err.code);
    },
}).catch(die);
server.on('query', (query) => {
    const action = ((action) => {
        switch (action) {
            case 0x00: return 'read';
            case 0x40: return 'response';
            case 0x80: return 'write';
            default: return undefined;
        }
        ;
    })(query.action);
    if (action) {
        const knxaddr = index_1.num2knxAddr(query.dest);
        if (action === 'write' || action === 'response') {
            const data = Buffer.from(query.data)
                .toString('hex').match(/.{1,2}/g).join(':');
            ok('%s data %s to %s', action, data, knxaddr);
        }
        if (action === 'read') {
            ok('read %s', knxaddr);
        }
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVzbW9uaXRvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImJ1c21vbml0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLCtCQUErQjtBQUMvQiwrQkFBK0I7QUFDL0IsdURBQW1EO0FBQ25ELCtDQUEwRDtBQUMxRCwrQkFBMkM7QUFFM0MsTUFBTSxJQUFJLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQywwQkFBMEIsQ0FBQztLQUNqRCxNQUFNLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQztLQUNsQixLQUFLLENBQUMsR0FBRyxFQUFFLE1BQU0sQ0FBQztLQUNsQixLQUFLLENBQUMsR0FBRyxFQUFFLFFBQVEsQ0FBQztLQUNwQixLQUFLLENBQUMsR0FBRyxFQUFFLFNBQVMsQ0FBQztLQUNyQixPQUFPLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQztLQUNyQixPQUFPLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztLQUNyQixRQUFRLENBQUMsUUFBUSxFQUFFLG1CQUFtQixDQUFDO0tBQ3ZDLFFBQVEsQ0FBQyxNQUFNLEVBQUUsb0JBQW9CLENBQUM7S0FDdEMsUUFBUSxDQUFDLEdBQUcsRUFBRSw0Q0FBNEMsQ0FBQztLQUMzRCxJQUFJLENBQUMsTUFBTSxDQUFDO0tBQ1osS0FBSyxDQUFDLEdBQUcsRUFBRSxNQUFNLENBQUM7S0FDbEIsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDLEVBQVU7SUFDM0IsRUFBRSxDQUFDLENBQUMsQ0FBQyxjQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2hCLE1BQU0sSUFBSSxLQUFLLENBQUMsc0JBQXNCLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDOUMsQ0FBQztJQUNELE1BQU0sQ0FBQyxFQUFFLENBQUM7QUFDWixDQUFDLENBQUM7S0FDRCxNQUFNLENBQUMsTUFBTSxFQUFFLENBQUMsSUFBWTtJQUMzQixNQUFNLFVBQVUsR0FBRyxDQUFDLElBQUksQ0FBQztJQUN6QixFQUFFLENBQUMs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SSxNQUFNLEtBQUssVUFBVSxDQUFDLENBQUMsQ0FBQztZQUNoRCxNQUFNLElBQUksR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUM7aUJBQ2pDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQzlDLEVBQUUsQ0FBQyxrQkFBa0IsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQ2hELENBQUM7UUFDRCxFQUFFLENBQUMsQ0FBQyxNQUFNLEtBQUssTUFBTSxDQUFDLENBQUMsQ0FBQztZQUN0QixFQUFFLENBQUMsU0FBUyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQ3pCLENBQUM7SUFDSCxDQUFDO0FBQ0gsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyB5YXJncyBmcm9tICd5YXJncyc7XG5pbXBvcnQgKiBhcyBjaGFsayBmcm9tICdjaGFsayc7XG5pbXBvcnQgeyBCdXNMaXN0ZW5lciB9IGZyb20gJy4uL2Rpc3QvYnVzLWxpc3RlbmVyJztcbmltcG9ydCB7IG51bTJrbnhBZGRyLCBpc0lQdjQgfSBmcm9tICcuLi9kaXN0L3V0aWxzL2luZGV4JztcbmltcG9ydCB7IGZvcm1hdCBhcyBzdHJGb3JtYXQgfSBmcm9tICd1dGlsJztcblxuY29uc3QgYXJndiA9IHlhcmdzLnVzYWdlKCdVc2FnZSAkMCAtcyA8aXAgYWRkcmVzcz4nKVxuICAuZGVtYW5kKFsnc2VydmVyJ10pXG4gIC5hbGlhcygncCcsICdwb3J0JylcbiAgLmFsaWFzKCdzJywgJ3NlcnZlcicpXG4gIC5hbGlhcygndCcsICd0aW1lb3V0JylcbiAgLmRlZmF1bHQoJ3BvcnQnLCAzNjcxKVxuICAuZGVmYXVsdCgndGltZW91dCcsIDApXG4gIC5kZXNjcmliZSgnc2VydmVyJywgJ1JlbW90ZSBpcCBhZGRyZXNzJylcbiAgLmRlc2NyaWJlKCdwb3J0JywgJ1JlbW90ZSBwb3J0IG51bWJlcicpXG4gIC5kZXNjcmliZSgndCcsICdTZWNvbmRzIHRvIHJldHJ5LCAwIC0gZmFpbCBvbiBmaXJzdCBhdHRlbXAnKVxuICAuaGVscCgnaGVscCcpXG4gIC5hbGlhcygnaCcsICdoZWxwJylcbiAgLmNvZXJjZSgnc2VydmVyJywgKGlwOiBzdHJpbmcpID0+IHtcbiAgICBpZiAoIWlzSVB2NChpcCkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBpcCBhZGRyZXNzICR7aXB9YCk7XG4gICAgfVxuICAgIHJldHVybiBpcDtcbiAgfSlcbiAgLmNvZXJjZSgncG9ydCcsIChwb3J0OiBzdHJpbmcpID0+IHtcbiAgICBjb25zdCBwb3J0TnVtYmVyID0gK3BvcnQ7XG4gICAgaWYgKHBvcnROdW1iZXIgPCAwIHx8IDY1NTM1IDwgcG9ydE51bWJlcikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIHBvcnQgbnVtYmVyICR7cG9ydE51bWJlcn1gKTtcbiAgICB9XG4gICAgcmV0dXJuIHBvcnROdW1iZXI7XG4gIH0pXG4gIC5jb2VyY2UoJ3RpbWVvdXQnLCAodGltZW91dDogc3RyaW5nKSA9PiB7XG4gICAgcmV0dXJuICgoK3RpbWVvdXQpID4+PiAwKSAqIDEwMDA7XG4gIH0pXG4gIC5leGFtcGxlKCckMCAtcyAxMC4xMC4xMC4wJywgJ1dpbGwgbGlzdGVuIGJ1cyB0aHJvdWdoIDEwLjEwLjEwLjAga254IGdhdGV3YXknKVxuICAuZXBpbG9nKHN0ckZvcm1hdCgnR2l0SHViOiAlcycsIGNoYWxrLnVuZGVybGluZSgnaHR0cHM6Ly9naXRodWIuY29tL2NyYWJpY29kZS9rbngtbGlzdGVuZXInKSkpXG4gIC5hcmd2O1xuXG4vLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tY29uc29sZVxuY29uc29sZS5sb2coYExpc3RlbmluZyAke2FyZ3Yuc2VydmVyfToke2FyZ3YucG9ydH1gKTtcblxuY29uc3Qgc2VydmVyID0gbmV3IEJ1c0xpc3RlbmVyKCk7XG5cbmNvbnN0IGRpZSA9ICgpID0+IHtcbiAgcmV0dXJuIHNlcnZlci5kaXNjb25uZWN0KCkudGhlbihcbiAgICAoKSA9PiBwcm9jZXNzLmV4aXQoKSxcbiAgICAoKSA9PiBwcm9jZXNzLmV4aXQoKSxcbiAgKTtcbn07XG5cbmNvbnN0IGZhaWwgPSAoZm9ybWF0OiBhbnksIC4uLnBhcmFtOiBhbnlbXSkgPT4ge1xuICBjb25zb2xlLmVycm9yKFxuICAgIGNoYWxrLnJlZChgWyBGQUlMIF1gKSArIGAgJHtzdHJGb3JtYXQoZm9ybWF0LCAuLi5wYXJhbSl9YCxcbiAgKTtcbn07XG5cbmNvbnN0IG9rID0gKGZvcm1hdDogYW55LCAuLi5wYXJhbTogYW55W10pID0+IHtcbiAgY29uc29sZS5lcnJvcihcbiAgICBjaGFsay5ncmVlbihgWyBPSyBdYCkgKyBgICR7c3RyRm9ybWF0KGZvcm1hdCwgLi4ucGFyYW0pfWAsXG4gICk7XG59O1xuXG4vLyBDbG9zZSB0dW5uZWxpbmcgb24gY3RybCtjXG5wcm9jZXNzLm9uKCdTSUdJTlQnLCBkaWUpO1xuXG5zZXJ2ZXIuYmluZChhcmd2LnNlcnZlciwgYXJndi5wb3J0LCB7XG4gIHRpbWVvdXQ6IGFyZ3YudGltZW91dCxcbiAgb25GYWlsdXJlOiAoZXJyOiBFcnJvciAmIHsgY29kZTogc3RyaW5nIH0pID0+IHtcbiAgICBmYWlsKCdFcnJvciBvY3VycmVkIHdoaWxlIGNvbm5lY3RpbmcgJXMnLCBlcnIuY29kZSk7XG4gIH0sXG59KS5jYXRjaChkaWUpO1xuXG5zZXJ2ZXIub24oJ3F1ZXJ5JywgKHF1ZXJ5OiBhbnkpID0+IHtcbiAgY29uc3QgYWN0aW9uID0gKChhY3Rpb24pID0+IHtcbiAgICBzd2l0Y2ggKGFjdGlvbikge1xuICAgICAgY2FzZSAweDAwOiByZXR1cm4gJ3JlYWQnO1xuICAgICAgY2FzZSAweDQwOiByZXR1cm4gJ3Jlc3BvbnNlJztcbiAgICAgIGNhc2UgMHg4MDogcmV0dXJuICd3cml0ZSc7XG4gICAgICBkZWZhdWx0OiByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH07XG4gIH0pKHF1ZXJ5LmFjdGlvbik7XG4gIGlmIChhY3Rpb24pIHtcbiAgICBjb25zdCBrbnhhZGRyID0gbnVtMmtueEFkZHIocXVlcnkuZGVzdCk7XG4gICAgaWYgKGFjdGlvbiA9PT0gJ3dyaXRlJyB8fCBhY3Rpb24gPT09ICdyZXNwb25zZScpIHtcbiAgICAgIGNvbnN0IGRhdGEgPSBCdWZmZXIuZnJvbShxdWVyeS5kYXRhKVxuICAgICAgICAudG9TdHJpbmcoJ2hleCcpLm1hdGNoKC8uezEsMn0vZykuam9pbignOicpO1xuICAgICAgb2soJyVzIGRhdGEgJXMgdG8gJXMnLCBhY3Rpb24sIGRhdGEsIGtueGFkZHIpO1xuICAgIH1cbiAgICBpZiAoYWN0aW9uID09PSAncmVhZCcpIHtcbiAgICAgIG9rKCdyZWFkICVzJywga254YWRkcik7XG4gICAgfVxuICB9XG59KTtcbiJdfQ==
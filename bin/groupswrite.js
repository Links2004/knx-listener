"use strict";
const chalk = require("chalk");
const yargs = require("yargs");
const index_1 = require("../dist/utils/index");
const bus_listener_1 = require("../dist/bus-listener");
const util_1 = require("util");
const argv = yargs.usage('Usage $0 -s <ip address> -g <group address> -d <XX:XX:..>')
    .demand(['server', 'groupAddress', 'data'])
    .alias('s', 'server')
    .alias('p', 'port')
    .alias('g', 'groupAddress')
    .alias('d', 'data')
    .alias('h', 'help')
    .default('port', 3671)
    .describe('data', 'Data to write')
    .describe('server', 'Remote ip address')
    .describe('port', 'Remote port number')
    .describe('groupAddress', 'Group address to issue the write telegram to')
    .coerce('server', (ip) => {
    if (!index_1.isIPv4(ip)) {
        throw new Error(`Invalid ip address ${ip}`);
    }
    return ip;
})
    .coerce('data', (data) => {
    if (!/^([0-9A-Fa-f]{2})+([:][0-9A-Fa-f]{2})?$/.test(data)) {
        throw new Error(`Invalid data format ${data}`);
    }
    return data;
})
    .coerce('port', (port) => {
    const portNumber = +port;
    if (portNumber < 0 || 65535 < portNumber) {
        throw new Error(`Invalid port number ${portNumber}`);
    }
    return portNumber;
})
    .check((args) => {
    if (!index_1.isKnxAddress(args.groupAddress)) {
        throw new Error(`Invalid group address ${args.groupAddress}`);
    }
    return true;
})
    .example('$0 -s 10.10.10.0 -g 0/0/1 -d 00:FF', 'Writes 0x00 0xFF to 0/0/1 through 10.10.10.0 knx gateway')
    .epilog(util_1.format('GitHub: %s', chalk.underline('https://github.com/crabicode/knx-listener')))
    .help('help').argv;
const server = new bus_listener_1.BusListener();
const die = () => {
    return server.disconnect().then(() => process.exit(), () => process.exit());
};
const fail = (format, ...param) => {
    console.error(chalk.red(`[ FAIL ]`) + ` ${util_1.format(format, ...param)}`);
    die();
};
const ok = (format, ...param) => {
    console.error(chalk.green(`[ OK ]`) + ` ${util_1.format(format, ...param)}`);
    setImmediate(die);
};
process.on('SIGINT', die);
server.bind(argv.server, argv.port).catch((err) => {
    fail('Failed to send request to %s:%d due to %s', argv.server, argv.port, err.code);
});
server.ready(() => {
    const data = Buffer.from(argv.data.split(':').map(i => parseInt(i, 16)));
    server.write(data, index_1.knxAddr2num(argv.groupAddress)).then(() => {
        ok(`Sent %s to %s`, argv.data, argv.groupAddress);
    }).catch((_err) => {
        fail(`Failed to write %s to %s`, argv.data, argv.groupAddress);
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JvdXBzd3JpdGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJncm91cHN3cml0ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsK0JBQStCO0FBQy9CLCtCQUErQjtBQUMvQiwrQ0FBd0U7QUFDeEUsdURBQW1EO0FBQ25ELCtCQUEyQztBQUUzQyxNQUFNLElBQUksR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDLDJEQUEyRCxDQUFDO0tBQ2xGLE1BQU0sQ0FBQyxDQUFDLFFBQVEsRUFBRSxjQUFjLEVBQUUsTUFBTSxDQUFDLENBQUM7S0FDMUMsS0FBSyxDQUFDLEdBQUcsRUFBRSxRQUFRLENBQUM7S0FDcEIsS0FBSyxDQUFDLEdBQUcsRUFBRSxNQUFNLENBQUM7S0FDbEIsS0FBSyxDQUFDLEdBQUcsRUFBRSxjQUFjLENBQUM7S0FDMUIsS0FBSyxDQUFDLEdBQUcsRUFBRSxNQUFNLENBQUM7S0FDbEIsS0FBSyxDQUFDLEdBQUcsRUFBRSxNQUFNLENBQUM7S0FDbEIsT0FBTyxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUM7S0FDckIsUUFBUSxDQUFDLE1BQU0sRUFBRSxlQUFlLENBQUM7S0FDakMsUUFBUSxDQUFDLFFBQVEsRUFBRSxtQkFBbUIsQ0FBQztLQUN2QyxRQUFRLENBQUMsTUFBTSxFQUFFLG9CQUFvQixDQUFDO0tBQ3RDLFFBQVEsQ0FBQyxjQUFjLEVBQUUsOENBQThDLENBQUM7S0FDeEUsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDLEVBQVU7SUFDM0IsRUFBRSxDQUFDLENBQUMsQ0FBQyxjQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2hCLE1BQU0sSUFBSSxLQUFLLENBQUMsc0JBQXNCLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDOUMsQ0FBQztJQUNELE1BQU0sQ0FBQyxFQUFFLENBQUM7QUFDWixDQUFDLENBQUM7S0FDRCxNQUFNLENBQUMsTUFBTSxFQUFFLENBQUMsSUFBWTtJQUMzQixFQUFFLENBQUMsQ0FB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QUFDO0lBQ3pFLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLG1CQUFXLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO1FBQ3RELEVBQUUsQ0FBQyxlQUFlLEVBQUUsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDcEQsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSTtRQUNaLElBQUksQ0FBQywwQkFBMEIsRUFDN0IsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDbEMsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGNoYWxrIGZyb20gJ2NoYWxrJztcbmltcG9ydCAqIGFzIHlhcmdzIGZyb20gJ3lhcmdzJztcbmltcG9ydCB7IGlzSVB2NCwga254QWRkcjJudW0sIGlzS254QWRkcmVzcyB9IGZyb20gJy4uL2Rpc3QvdXRpbHMvaW5kZXgnO1xuaW1wb3J0IHsgQnVzTGlzdGVuZXIgfSBmcm9tICcuLi9kaXN0L2J1cy1saXN0ZW5lcic7XG5pbXBvcnQgeyBmb3JtYXQgYXMgc3RyRm9ybWF0IH0gZnJvbSAndXRpbCc7XG5cbmNvbnN0IGFyZ3YgPSB5YXJncy51c2FnZSgnVXNhZ2UgJDAgLXMgPGlwIGFkZHJlc3M+IC1nIDxncm91cCBhZGRyZXNzPiAtZCA8WFg6WFg6Li4+JylcbiAgLmRlbWFuZChbJ3NlcnZlcicsICdncm91cEFkZHJlc3MnLCAnZGF0YSddKVxuICAuYWxpYXMoJ3MnLCAnc2VydmVyJylcbiAgLmFsaWFzKCdwJywgJ3BvcnQnKVxuICAuYWxpYXMoJ2cnLCAnZ3JvdXBBZGRyZXNzJylcbiAgLmFsaWFzKCdkJywgJ2RhdGEnKVxuICAuYWxpYXMoJ2gnLCAnaGVscCcpXG4gIC5kZWZhdWx0KCdwb3J0JywgMzY3MSlcbiAgLmRlc2NyaWJlKCdkYXRhJywgJ0RhdGEgdG8gd3JpdGUnKVxuICAuZGVzY3JpYmUoJ3NlcnZlcicsICdSZW1vdGUgaXAgYWRkcmVzcycpXG4gIC5kZXNjcmliZSgncG9ydCcsICdSZW1vdGUgcG9ydCBudW1iZXInKVxuICAuZGVzY3JpYmUoJ2dyb3VwQWRkcmVzcycsICdHcm91cCBhZGRyZXNzIHRvIGlzc3VlIHRoZSB3cml0ZSB0ZWxlZ3JhbSB0bycpXG4gIC5jb2VyY2UoJ3NlcnZlcicsIChpcDogc3RyaW5nKSA9PiB7XG4gICAgaWYgKCFpc0lQdjQoaXApKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgaXAgYWRkcmVzcyAke2lwfWApO1xuICAgIH1cbiAgICByZXR1cm4gaXA7XG4gIH0pXG4gIC5jb2VyY2UoJ2RhdGEnLCAoZGF0YTogc3RyaW5nKSA9PiB7XG4gICAgaWYgKCEvXihbMC05QS1GYS1mXXsyfSkrKFs6XVswLTlBLUZhLWZdezJ9KT8kLy50ZXN0KGRhdGEpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgZGF0YSBmb3JtYXQgJHtkYXRhfWApO1xuICAgIH1cbiAgICByZXR1cm4gZGF0YTtcbiAgfSlcbiAgLmNvZXJjZSgncG9ydCcsIChwb3J0OiBzdHJpbmcpID0+IHtcbiAgICBjb25zdCBwb3J0TnVtYmVyID0gK3BvcnQ7XG4gICAgaWYgKHBvcnROdW1iZXIgPCAwIHx8IDY1NTM1IDwgcG9ydE51bWJlcikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIHBvcnQgbnVtYmVyICR7cG9ydE51bWJlcn1gKTtcbiAgICB9XG4gICAgcmV0dXJuIHBvcnROdW1iZXI7XG4gIH0pXG4gIC5jaGVjaygoYXJncykgPT4ge1xuICAgIGlmICghaXNLbnhBZGRyZXNzKGFyZ3MuZ3JvdXBBZGRyZXNzKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIGdyb3VwIGFkZHJlc3MgJHthcmdzLmdyb3VwQWRkcmVzc31gKTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH0pXG4gIC5leGFtcGxlKCckMCAtcyAxMC4xMC4xMC4wIC1nIDAvMC8xIC1kIDAwOkZGJywgJ1dyaXRlcyAweDAwIDB4RkYgdG8gMC8wLzEgdGhyb3VnaCAxMC4xMC4xMC4wIGtueCBnYXRld2F5JylcbiAgLmVwaWxvZyhzdHJGb3JtYXQoJ0dpdEh1YjogJXMnLCBjaGFsay51bmRlcmxpbmUoJ2h0dHBzOi8vZ2l0aHViLmNvbS9jcmFiaWNvZGUva254LWxpc3RlbmVyJykpKVxuICAuaGVscCgnaGVscCcpLmFyZ3Y7XG5cbmNvbnN0IHNlcnZlciA9IG5ldyBCdXNMaXN0ZW5lcigpO1xuXG5jb25zdCBkaWUgPSAoKSA9PiB7XG4gIHJldHVybiBzZXJ2ZXIuZGlzY29ubmVjdCgpLnRoZW4oXG4gICAgKCkgPT4gcHJvY2Vzcy5leGl0KCksXG4gICAgKCkgPT4gcHJvY2Vzcy5leGl0KCksXG4gICk7XG59O1xuXG5jb25zdCBmYWlsID0gKGZvcm1hdDogYW55LCAuLi5wYXJhbTogYW55W10pID0+IHtcbiAgY29uc29sZS5lcnJvcihcbiAgICBjaGFsay5yZWQoYFsgRkFJTCBdYCkgKyBgICR7c3RyRm9ybWF0KGZvcm1hdCwgLi4ucGFyYW0pfWAsXG4gICk7XG4gIGRpZSgpO1xufTtcblxuY29uc3Qgb2sgPSAoZm9ybWF0OiBhbnksIC4uLnBhcmFtOiBhbnlbXSkgPT4ge1xuICBjb25zb2xlLmVycm9yKFxuICAgIGNoYWxrLmdyZWVuKGBbIE9LIF1gKSArIGAgJHtzdHJGb3JtYXQoZm9ybWF0LCAuLi5wYXJhbSl9YCxcbiAgKTtcbiAgLy8gc2NoZWR1bGUgZGllIG5leHQgY3ljbGVcbiAgc2V0SW1tZWRpYXRlKGRpZSk7XG59O1xuXG5wcm9jZXNzLm9uKCdTSUdJTlQnLCBkaWUpOyAvLyBDbG9zZSB0dW5uZWxpbmcgb24gY3RybCtjXG5cbnNlcnZlci5iaW5kKGFyZ3Yuc2VydmVyLCBhcmd2LnBvcnQpLmNhdGNoKChlcnIpID0+IHtcbiAgZmFpbCgnRmFpbGVkIHRvIHNlbmQgcmVxdWVzdCB0byAlczolZCBkdWUgdG8gJXMnLCBhcmd2LnNlcnZlciwgYXJndi5wb3J0LCBlcnIuY29kZSk7XG59KTtcblxuc2VydmVyLnJlYWR5KCgpID0+IHtcbiAgY29uc3QgZGF0YSA9IEJ1ZmZlci5mcm9tKGFyZ3YuZGF0YS5zcGxpdCgnOicpLm1hcChpID0+IHBhcnNlSW50KGksIDE2KSkpO1xuICBzZXJ2ZXIud3JpdGUoZGF0YSwga254QWRkcjJudW0oYXJndi5ncm91cEFkZHJlc3MpKS50aGVuKCgpID0+IHtcbiAgICBvayhgU2VudCAlcyB0byAlc2AsIGFyZ3YuZGF0YSwgYXJndi5ncm91cEFkZHJlc3MpO1xuICB9KS5jYXRjaCgoX2VycikgPT4ge1xuICAgIGZhaWwoYEZhaWxlZCB0byB3cml0ZSAlcyB0byAlc2AsXG4gICAgICBhcmd2LmRhdGEsIGFyZ3YuZ3JvdXBBZGRyZXNzKTtcbiAgfSk7XG59KTtcbiJdfQ==
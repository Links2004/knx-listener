"use strict";
function header(raw, pos) {
    const headerLength = raw.readUInt8(pos.next());
    const protocolVersion = raw.readUInt8(pos.next());
    const serviceId = raw.readUInt16BE(pos.next(2));
    const totalLength = raw.readUInt16BE(pos.next(2));
    if (headerLength !== 0x06) {
        throw new Error(`Invalid header length ${headerLength}`);
    }
    if (protocolVersion !== 0x10) {
        throw new Error(`Invalid protocol version ${protocolVersion}`);
    }
    if (raw.length !== totalLength) {
        throw new Error(`Invalid total length, expected ${raw.length}, but got ${totalLength}`);
    }
    return {
        serviceId,
    };
}
exports.header = header;
;
function channel(raw, pos) {
    const channelId = raw.readUInt8(pos.next());
    const status = raw.readUInt8(pos.next());
    if (channelId === 0) {
        throw new Error(`Invalid channel id ${channelId}`);
    }
    return {
        channelId, status,
    };
}
exports.channel = channel;
;
function hpai(raw, pos) {
    const size = raw.readUInt8(pos.next());
    if (size !== 0x8) {
        throw new Error(`Failed to read hpai at ${pos.cur}`);
    }
    const protocol = raw.readUInt8(pos.next());
    const ip = raw.readUIntBE(pos.next(4), 4);
    const port = raw.readInt16BE(pos.next(2));
    return {
        ip, port, protocol,
    };
}
exports.hpai = hpai;
;
function connectResponse(raw, pos) {
    const size = raw.readInt8(pos.next());
    const contype = raw.readInt8(pos.next());
    switch (contype) {
        case 4: {
            if (size !== 0x4) {
                throw new Error(`Failed to read connect response for tunneling at ${pos.cur}`);
            }
            const knxAddress = raw.readUInt16BE(pos.next(2));
            return {
                connectionType: contype,
                knxAddress,
            };
        }
        default: throw new Error(`Unknown connection type ${contype}`);
    }
}
exports.connectResponse = connectResponse;
;
function seqnum(raw, pos) {
    const size = raw.readUInt8(pos.next());
    if (size !== 0x4) {
        throw new Error(`Failed to read structure at ${pos.cur}`);
    }
    const channelId = raw.readUInt8(pos.next());
    const seqn = raw.readInt8(pos.next());
    const status = raw.readUInt8(pos.next());
    return {
        channelId, seqn, status,
    };
}
exports.seqnum = seqnum;
;
function tunnelCemi(raw, pos) {
    pos.skip('messageCode');
    const additionalInfoLength = raw.readUInt8(pos.next());
    if (additionalInfoLength) {
        pos.skip('additionalInfo', additionalInfoLength);
    }
    pos.skip('controlField1');
    pos.skip('controlField2');
    const source = raw.readUInt16BE(pos.next(2));
    const dest = raw.readUInt16BE(pos.next(2));
    const npduLength = raw.readUInt8(pos.next());
    const apdu = raw.readUInt16BE(pos.next(2));
    const action = apdu & (128 |
        64 | 0);
    if (action & (128 | 64)) {
        let data;
        if (npduLength > 1) {
            data = raw.subarray(pos.next(npduLength), pos.cur);
        }
        else {
            data = new Uint8Array([apdu & 0x3f]);
        }
        return {
            data, action, dest, source,
        };
    }
    else {
        return {
            action, dest, source,
        };
    }
}
exports.tunnelCemi = tunnelCemi;
;
//# sourceMappingURL=data:application/json;base64,
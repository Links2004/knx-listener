"use strict";
const tslib_1 = require("tslib");
const async_socket_1 = require("./utils/async-socket");
const smart_cursor_1 = require("./utils/smart-cursor");
const deserializer_1 = require("./deserializer");
const serializer_1 = require("./serializer");
class QueryManager extends async_socket_1.AsyncSocket {
    connect(port = 0) {
        const ref = super.on('raw', this.process.bind(this));
        return super.connect(port).catch((err) => {
            ref.unsubscribe();
            throw err;
        });
    }
    request(host, port, data, select, timeout) {
        return new Promise((resolve, reject) => {
            const ref = this.on('query', (query, remote) => {
                if (select(query, remote)) {
                    if (query.status === 0) {
                        resolve(query);
                    }
                    else {
                        reject(new Error(`Request error ${query.status}`));
                    }
                }
            });
            setTimeout(() => {
                ref.unsubscribe();
                const err = new Error(`Request timeout`);
                err.code = 'ETIMEOUT';
                reject(err);
            }, timeout > 200 ? timeout : 200).unref();
            return super.send(host, port, data).catch((err) => {
                ref.unsubscribe();
                reject(err);
            });
        });
    }
    process(raw, remote) {
        try {
            const pos = new smart_cursor_1.SmartCursor();
            const header = deserializer_1.header(raw, pos);
            switch (header.serviceId) {
                case 518: {
                    const channel = deserializer_1.channel(raw, pos);
                    const sender = deserializer_1.hpai(raw, pos);
                    const response = deserializer_1.connectResponse(raw, pos);
                    return this.events.emit('query', tslib_1.__assign({}, header, channel, sender, response), remote);
                }
                case 520: {
                    const channel = deserializer_1.channel(raw, pos);
                    return this.events.emit('query', tslib_1.__assign({}, channel), remote);
                }
                case 1057: {
                    const seqn = deserializer_1.seqnum(raw, pos);
                    return this.events.emit('query', tslib_1.__assign({}, seqn), remote);
                }
                case 1056: {
                    const seqn = deserializer_1.seqnum(raw, pos);
                    const cemi = deserializer_1.tunnelCemi(raw, pos);
                    this.send(remote.address, remote.port, serializer_1.ack(seqn.seqn, seqn.channelId, 0));
                    return this.events.emit('query', tslib_1.__assign({}, cemi, seqn), remote);
                }
                case 522: {
                    const channel = deserializer_1.channel(raw, pos);
                    return this.events.emit('query', tslib_1.__assign({}, channel), remote);
                }
                default: throw new Error(`Failed to process ${header.serviceId}`);
            }
        }
        catch (err) {
            return this.events.emit('unprocessed', err, raw, remote);
        }
    }
}
exports.QueryManager = QueryManager;
//# sourceMappingURL=data:application/json;base64,
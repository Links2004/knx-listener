"use strict";
const tslib_1 = require("tslib");
const async_socket_1 = require("./utils/async-socket");
const smart_cursor_1 = require("./utils/smart-cursor");
const deserializer_1 = require("./deserializer");
const serializer_1 = require("./serializer");
class QueryManager extends async_socket_1.AsyncSocket {
    constructor() {
        super();
        super.on('raw', this.process.bind(this));
    }
    request(host, port, data, select, timeout) {
        return new Promise((resolve, reject) => {
            const ref = this.on('query', (query, remote) => {
                if (select(query, remote)) {
                    if (query.status === 0) {
                        resolve(query);
                    }
                    else {
                        reject(new Error(`Request error ${query.status}`));
                    }
                }
            });
            setTimeout(() => {
                ref.unsubscribe();
                reject(tslib_1.__assign({}, new Error(`Request timeout`), { code: 'ETIMEOUT' }));
            }, timeout > 200 ? timeout : 200).unref();
            return super.send(host, port, data).catch((err) => {
                ref.unsubscribe();
                reject(err);
            });
        });
    }
    process(raw, remote) {
        try {
            const pos = new smart_cursor_1.SmartCursor();
            const header = deserializer_1.header(raw, pos);
            switch (header.serviceId) {
                case 518: {
                    const channel = deserializer_1.channel(raw, pos);
                    const sender = deserializer_1.hpai(raw, pos);
                    const response = deserializer_1.connectResponse(raw, pos);
                    return this.events.emit('query', tslib_1.__assign({}, header, channel, sender, response), remote);
                }
                case 520: {
                    const channel = deserializer_1.channel(raw, pos);
                    return this.events.emit('query', tslib_1.__assign({}, channel), remote);
                }
                case 1057: {
                    const seqn = deserializer_1.seqnum(raw, pos);
                    return this.events.emit('query', tslib_1.__assign({}, seqn), remote);
                }
                case 1056: {
                    const seqn = deserializer_1.seqnum(raw, pos);
                    const cemi = deserializer_1.tunnelCemi(raw, pos);
                    this.send(remote.address, remote.port, serializer_1.ack(seqn.seqn, seqn.channelId, 0));
                    return this.events.emit('query', tslib_1.__assign({}, cemi, seqn), remote);
                }
                case 522: {
                    const channel = deserializer_1.channel(raw, pos);
                    return this.events.emit('query', tslib_1.__assign({}, channel), remote);
                }
                default: throw new Error(`Failed to process ${header.serviceId}`);
            }
        }
        catch (err) {
            return this.events.emit('unprocessed', err, raw, remote);
        }
    }
}
exports.QueryManager = QueryManager;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicXVlcnktbWFuYWdlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9xdWVyeS1tYW5hZ2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBR0EsdURBRThCO0FBQzlCLHVEQUU4QjtBQUM5QixpREFPd0I7QUFDeEIsNkNBRXNCO0FBU3RCLGtCQUEwQixTQUFRLDBCQUFXO0lBQzNDO1FBQ0UsS0FBSyxFQUFFLENBQUM7UUFFUixLQUFLLENBQUMsRUFBRSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQzNDLENBQUM7SUFJRCxPQUFPLENBQ0wsSUFBWSxFQUFFLElBQVksRUFBRSxJQUFZLEVBQ3hDLE1BQWdELEVBQUUsT0FBZ0I7UUFFbEUsTUFBTSxDQUFDLElBQUksT0FBTyxDQUFJLENBQUMsT0FBTyxFQUFFLE1BQU07WUFFcEMsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBeUIsT0FBTyxFQUFFLENBQUMsS0FBSyxFQUFFLE1BQU07Z0JBRWpFLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUMxQixFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsTUFBTSxLQUFLLENBQWMsQ0FBQyxDQUFDLENBQUM7d0JBQ3BDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztvQkFDakIsQ0FBQztvQkFBQyxJQUFJLENBQUMsQ0FBQzt3QkFDTixNQUFNLENBQUMsSUFBSSxLQUFLLENBQUMsaUJBQWlCLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUM7b0JBQ3JELENBQUM7Z0JBQ0gsQ0FBQztZQUNILENBQUMsQ0FBQyxDQUFDO1lBRUgsVUFBVSxDQUFDO2dCQUNULEdBQUcsQ0FBQyxXQUFXLEVBQUUsQ0FBQztnQkFDbEIsTUFBTSxzQkFBTSxJQUFJLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQyxJQUFFLElBQUksRUFBRSxVQUFVLElBQUcsQ0FBQztZQUNoRSxDQUFDLEVBQUUsT0FBTyxHQUFHLEdBQUcsR0FBRyxPQUFPLEdBQUcsR0FBRyxDQUFDLENBQUMsS0FBSyxFQUFFLENBQUM7WUFFMUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHO2dCQUM1QyxHQUFHLENBQUMsV0FBVyxFQUFFLENBQUM7Z0JBQ2xCLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUNkLENBQUMsQ0FBQyxDQUFDO1FBQ0wsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBSU8sT0FBTyxDQUFDLEdBQVcsRUFBRSxNQUFrQjtRQUM3QyxJQUFJLENBQUM7WUFDSCxNQUFNLEdBQUcsR0FBRyxJQUFJLDBCQUFXLEVBQUUsQ0FBQztZQUM5QixNQUFNLE1BQU0sR0FBRyxxQkFBVSxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQztZQUNwQyxNQUFNLENBQUMsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQztnQkFDekIsS0FBSyxHQUF1QixFQUFFLENBQUM7b0JBQzdCLE1BQU0sT0FBTyxHQUFHLHNCQUFXLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDO29CQUN0QyxNQUFNLE1BQU0sR0FBRyxtQkFBSSxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQztvQkFDOUIsTUFBTSxRQUFRLEdBQUcsOEJBQWUsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUM7b0JBQzNDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLHVCQUMxQixNQUFNLEVBQUssT0FBTyxFQUFLLE1BQU0sRUFBSyxRQUFRLEdBQzVDLE1BQU0sQ0FBQyxDQUFDO2dCQUNiLENBQUM7Z0JBQ0QsS0FBSyxHQUE0QixFQUFFLENBQUM7b0JBQ2xDLE1BQU0sT0FBTyxHQUFHLHNCQUFXLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDO29CQUN0QyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyx1QkFBTyxPQUFPLEdBQUksTUFBTSxDQUFDLENBQUM7Z0JBQzNELENBQUM7Z0JBQ0QsS0FBSyxJQUFvQixFQUFFLENBQUM7b0JBQzFCLE1BQU0sSUFBSSxHQUFHLHFCQUFNLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDO29CQUM5QixNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyx1QkFBTyxJQUFJLEdBQUksTUFBTSxDQUFDLENBQUM7Z0JBQ3hELENBQUM7Z0JBQ0QsS0FBSyxJQUF3QixFQUFFLENBQUM7b0JBQzlCLE1BQU0sSUFBSSxHQUFHLHFCQUFNLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDO29CQUM5QixNQUFNLElBQUksR0FBRyx5QkFBVSxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQztvQkFFbEMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxFQUFFLE1BQU0sQ0FBQyxJQUFJLEVBQUUsZ0JBQUcsQ0FDeEMsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsU0FBUyxFQUFFLENBQWMsQ0FDMUMsQ0FBQyxDQUFDO29CQUNILE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLHVCQUFPLElBQUksRUFBSyxJQUFJLEdBQUksTUFBTSxDQUFDLENBQUM7Z0JBQ2pFLENBQUM7Z0JBQ0QsS0FBSyxHQUEwQixFQUFFLENBQUM7b0JBQ2hDLE1BQU0sT0FBTyxHQUFHLHNCQUFXLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDO29CQUN0QyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyx1QkFBTyxPQUFPLEdBQUksTUFBTSxDQUFDLENBQUM7Z0JBQzNELENBQUM7Z0JBQ0QsU0FBUyxNQUFNLElBQUksS0FBSyxDQUFDLHFCQUFxQixNQUFNLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztZQUNwRSxDQUFDO1FBQ0gsQ0FBRTtRQUFBLEtBQUssQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7WUFDYixNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsYUFBYSxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDM0QsQ0FBQztJQUNILENBQUM7Q0FDRjtBQWhGRCxvQ0FnRkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBSZW1vdGVJbmZvLFxufSBmcm9tICdkZ3JhbSc7XG5pbXBvcnQge1xuICBBc3luY1NvY2tldCxcbn0gZnJvbSAnLi91dGlscy9hc3luYy1zb2NrZXQnO1xuaW1wb3J0IHtcbiAgU21hcnRDdXJzb3IsXG59IGZyb20gJy4vdXRpbHMvc21hcnQtY3Vyc29yJztcbmltcG9ydCB7XG4gIGNoYW5uZWwgYXMgcmVhZENoYW5uZWwsXG4gIGNvbm5lY3RSZXNwb25zZSxcbiAgaGVhZGVyIGFzIHJlYWRIZWFkZXIsXG4gIGhwYWksXG4gIHNlcW51bSxcbiAgdHVubmVsQ2VtaSxcbn0gZnJvbSAnLi9kZXNlcmlhbGl6ZXInO1xuaW1wb3J0IHtcbiAgYWNrLFxufSBmcm9tICcuL3NlcmlhbGl6ZXInO1xuaW1wb3J0IHtcbiAgU2VydmljZSxcbiAgU3RhdHVzLFxufSBmcm9tICcuL2NvbnN0YW50cyc7XG5cbi8qKlxuICogTWFuYWdlcyBpbyBzZXJ2ZXIgcXVlcmllcyBhbmQgdHJhY2tzIHJlc29sdXRpb24gb2YgbWFwcGFibGUgcmVxdWVzdHNcbiAqL1xuZXhwb3J0IGNsYXNzIFF1ZXJ5TWFuYWdlciBleHRlbmRzIEFzeW5jU29ja2V0IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcbiAgICAvLyBmb3J3YXJkIHJhdyBkYXRhIGZvciBwcm9jZXNzaW5nXG4gICAgc3VwZXIub24oJ3JhdycsIHRoaXMucHJvY2Vzcy5iaW5kKHRoaXMpKTtcbiAgfVxuICAvKipcbiAgICogQ3JlYXRlcyBhIG1hcGFibGUgcmVxdWVzdCB0byB0cmFjayByZXNwb25zZXMgd2l0aCB0aW1lb3V0XG4gICAqL1xuICByZXF1ZXN0PFQ+KFxuICAgIGhvc3Q6IHN0cmluZywgcG9ydDogbnVtYmVyLCBkYXRhOiBCdWZmZXIsXG4gICAgc2VsZWN0OiAocmVzOiBULCBzZW5kZXI/OiBSZW1vdGVJbmZvKSA9PiBib29sZWFuLCB0aW1lb3V0PzogbnVtYmVyLFxuICApIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2U8VD4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgLy8ga2VlcCByZWYgdG8gdW5zdWIgdG8gYXZvaWQgYSBtZW1vcnkgbGVha1xuICAgICAgY29uc3QgcmVmID0gdGhpcy5vbjxUICYgeyBzdGF0dXM6IG51bWJlciB9PigncXVlcnknLCAocXVlcnksIHJlbW90ZSkgPT4ge1xuICAgICAgICAvLyBtYXAgcmVzcG9uc2UgdG8gdGhlIHJlcXVlc3RcbiAgICAgICAgaWYgKHNlbGVjdChxdWVyeSwgcmVtb3RlKSkge1xuICAgICAgICAgIGlmIChxdWVyeS5zdGF0dXMgPT09IFN0YXR1cy5Ob0Vycm9yKSB7XG4gICAgICAgICAgICByZXNvbHZlKHF1ZXJ5KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVqZWN0KG5ldyBFcnJvcihgUmVxdWVzdCBlcnJvciAke3F1ZXJ5LnN0YXR1c31gKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIC8vIHNldCB0aW1lb3V0IGlmIG5vIHJlc3BvbnNlIHdpdGhpbiBnaXZlbiB0aW1lXG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgcmVmLnVuc3Vic2NyaWJlKCk7IC8vIGF2b2lkIG1lbW9yeSBsZWFrXG4gICAgICAgIHJlamVjdCh7IC4uLm5ldyBFcnJvcihgUmVxdWVzdCB0aW1lb3V0YCksIGNvZGU6ICdFVElNRU9VVCcgfSk7XG4gICAgICB9LCB0aW1lb3V0ID4gMjAwID8gdGltZW91dCA6IDIwMCkudW5yZWYoKTsgLy8gdW5yZWYgdGltZW91dCB0byBsZXQgbm9kZSBleGl0XG4gICAgICAvLyBtYWtlIHJlcXVlc3QgYW5kIHByb3BhZ2F0ZSBlcnJvcnNcbiAgICAgIHJldHVybiBzdXBlci5zZW5kKGhvc3QsIHBvcnQsIGRhdGEpLmNhdGNoKChlcnIpID0+IHtcbiAgICAgICAgcmVmLnVuc3Vic2NyaWJlKCk7IC8vIGF2b2lkIG1lbW9yeSBsZWFrXG4gICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIFByb2Nlc3NlcyByYXcgbWVzc2FnZXMgZnJvbSBzb2NrZXQgc3RyZWFtXG4gICAqL1xuICBwcml2YXRlIHByb2Nlc3MocmF3OiBCdWZmZXIsIHJlbW90ZTogUmVtb3RlSW5mbykge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBwb3MgPSBuZXcgU21hcnRDdXJzb3IoKTtcbiAgICAgIGNvbnN0IGhlYWRlciA9IHJlYWRIZWFkZXIocmF3LCBwb3MpO1xuICAgICAgc3dpdGNoIChoZWFkZXIuc2VydmljZUlkKSB7XG4gICAgICAgIGNhc2UgU2VydmljZS5Db25uZWN0UmVzcG9uc2U6IHtcbiAgICAgICAgICBjb25zdCBjaGFubmVsID0gcmVhZENoYW5uZWwocmF3LCBwb3MpO1xuICAgICAgICAgIGNvbnN0IHNlbmRlciA9IGhwYWkocmF3LCBwb3MpO1xuICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gY29ubmVjdFJlc3BvbnNlKHJhdywgcG9zKTtcbiAgICAgICAgICByZXR1cm4gdGhpcy5ldmVudHMuZW1pdCgncXVlcnknLCB7XG4gICAgICAgICAgICAuLi5oZWFkZXIsIC4uLmNoYW5uZWwsIC4uLnNlbmRlciwgLi4ucmVzcG9uc2UsXG4gICAgICAgICAgfSwgcmVtb3RlKTtcbiAgICAgICAgfVxuICAgICAgICBjYXNlIFNlcnZpY2UuQ29ubmVjdFN0YXRlUmVzcG9uc2U6IHtcbiAgICAgICAgICBjb25zdCBjaGFubmVsID0gcmVhZENoYW5uZWwocmF3LCBwb3MpO1xuICAgICAgICAgIHJldHVybiB0aGlzLmV2ZW50cy5lbWl0KCdxdWVyeScsIHsgLi4uY2hhbm5lbCB9LCByZW1vdGUpO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgU2VydmljZS5UdW5uZWxpbmdBY2s6IHtcbiAgICAgICAgICBjb25zdCBzZXFuID0gc2VxbnVtKHJhdywgcG9zKTtcbiAgICAgICAgICByZXR1cm4gdGhpcy5ldmVudHMuZW1pdCgncXVlcnknLCB7IC4uLnNlcW4gfSwgcmVtb3RlKTtcbiAgICAgICAgfVxuICAgICAgICBjYXNlIFNlcnZpY2UuVHVubmVsaW5nUmVxdWVzdDoge1xuICAgICAgICAgIGNvbnN0IHNlcW4gPSBzZXFudW0ocmF3LCBwb3MpO1xuICAgICAgICAgIGNvbnN0IGNlbWkgPSB0dW5uZWxDZW1pKHJhdywgcG9zKTtcbiAgICAgICAgICAvLyByZXBseSBhY2sgdG8gaW5kaWNhdGUgc3VjY2Vzc2Z1bCByZWNlcHRpb24gb2YgdGhlIG1lc3NhZ2VcbiAgICAgICAgICB0aGlzLnNlbmQocmVtb3RlLmFkZHJlc3MsIHJlbW90ZS5wb3J0LCBhY2soXG4gICAgICAgICAgICBzZXFuLnNlcW4sIHNlcW4uY2hhbm5lbElkLCBTdGF0dXMuTm9FcnJvcixcbiAgICAgICAgICApKTtcbiAgICAgICAgICByZXR1cm4gdGhpcy5ldmVudHMuZW1pdCgncXVlcnknLCB7IC4uLmNlbWksIC4uLnNlcW4gfSwgcmVtb3RlKTtcbiAgICAgICAgfVxuICAgICAgICBjYXNlIFNlcnZpY2UuRGlzY29ubmVjdFJlc3BvbnNlOiB7XG4gICAgICAgICAgY29uc3QgY2hhbm5lbCA9IHJlYWRDaGFubmVsKHJhdywgcG9zKTtcbiAgICAgICAgICByZXR1cm4gdGhpcy5ldmVudHMuZW1pdCgncXVlcnknLCB7IC4uLmNoYW5uZWwgfSwgcmVtb3RlKTtcbiAgICAgICAgfVxuICAgICAgICBkZWZhdWx0OiB0aHJvdyBuZXcgRXJyb3IoYEZhaWxlZCB0byBwcm9jZXNzICR7aGVhZGVyLnNlcnZpY2VJZH1gKTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHJldHVybiB0aGlzLmV2ZW50cy5lbWl0KCd1bnByb2Nlc3NlZCcsIGVyciwgcmF3LCByZW1vdGUpO1xuICAgIH1cbiAgfVxufVxuIl19
"use strict";
const dgram_1 = require("dgram");
const events_1 = require("events");
class AsyncSocket {
    constructor() {
        this.events = new events_1.EventEmitter();
    }
    isConnected() {
        return this.socket ? true : false;
    }
    connect(port = 0) {
        return new Promise((resolve, reject) => {
            if (this.isConnected()) {
                resolve(this.socket.address());
            }
            else {
                this.socket = dgram_1.createSocket('udp4')
                    .on('message', (raw, remote) => {
                    this.events.emit('raw', raw, remote);
                })
                    .once('close', () => {
                    this.socket = undefined;
                    this.events.removeAllListeners();
                })
                    .once('error', (err) => {
                    reject(err);
                })
                    .once('listening', () => {
                    resolve(this.socket.address());
                });
                this.socket.bind(port);
            }
        });
    }
    complete(cb) {
        return new Promise((resolve) => {
            if (this.isConnected()) {
                this.socket.once('close', () => {
                    resolve(typeof cb === 'function' ? cb() : undefined);
                });
            }
            else {
                resolve(typeof cb === 'function' ? cb() : undefined);
            }
        });
    }
    disconnect(cb) {
        return new Promise((resolve) => {
            if (this.isConnected()) {
                this.socket.once('close', () => {
                    resolve(typeof cb === 'function' ? cb() : undefined);
                });
                this.socket.close();
            }
            else {
                resolve(typeof cb === 'function' ? cb() : undefined);
            }
        });
    }
    send(host, port, data) {
        return new Promise((resolve, reject) => {
            if (this.isConnected()) {
                this.socket.send(data, port, host, (err, bytes) => {
                    if (err) {
                        reject(err);
                    }
                    if (bytes !== data.length) {
                        reject(new Error(`Expected to send ${data.length} bytes, but sent ${bytes}`));
                    }
                    resolve();
                });
            }
            else {
                throw new Error(`No connection`);
            }
        });
    }
    on(event, cb) {
        if (this.events.on(event, cb)) {
            return {
                unsubscribe: () => this.events.removeListener(event, cb),
            };
        }
        else {
            throw new Error(`Failed to subscribe`);
        }
    }
}
exports.AsyncSocket = AsyncSocket;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXN5bmMtc29ja2V0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3V0aWxzL2FzeW5jLXNvY2tldC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsaUNBSWU7QUFDZixtQ0FFZ0I7QUFRaEI7SUFBQTtRQUVZLFdBQU0sR0FBaUIsSUFBSSxxQkFBWSxFQUFFLENBQUM7SUErRXRELENBQUM7SUE5RUMsV0FBVztRQUNULE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksR0FBRyxLQUFLLENBQUM7SUFDcEMsQ0FBQztJQUNELE9BQU8sQ0FBQyxPQUFlLENBQUM7UUFDdEIsTUFBTSxDQUFDLElBQUksT0FBTyxDQUFjLENBQUMsT0FBTyxFQUFFLE1BQU07WUFDOUMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUMsQ0FBQztnQkFDdkIsT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQztZQUNqQyxDQUFDO1lBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQ04sSUFBSSxDQUFDLE1BQU0sR0FBRyxvQkFBWSxDQUFDLE1BQU0sQ0FBQztxQkFDL0IsRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFDLEdBQVcsRUFBRSxNQUFNO29CQUNqQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsR0FBRyxFQUFFLE1BQU0sQ0FBQyxDQUFDO2dCQUN2QyxDQUFDLENBQUM7cUJBQ0QsSUFBSSxDQUFDLE9BQU8sRUFBRTtvQkFDYixJQUFJLENBQUMsTUFBTSxHQUFHLFNBQVMsQ0FBQztvQkFFeEIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxrQkFBa0IsRUFBRSxDQUFDO2dCQUNuQyxDQUFDLENBQUM7cUJBQ0QsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDLEdBQUc7b0JBQ2pCLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztnQkFDZCxDQUFDLENBQUM7cUJBQ0Qs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Q0wsV0FBVyxFQUFFLE1BQU0sSUFBSSxDQUFDLE1BQU0sQ0FBQyxjQUFjLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQzthQUN6RCxDQUFDO1FBQ0osQ0FBQztRQUFDLElBQUksQ0FBQyxDQUFDO1lBQ04sTUFBTSxJQUFJLEtBQUssQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO1FBQ3pDLENBQUM7SUFDSCxDQUFDO0NBQ0Y7QUFqRkQsa0NBaUZDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgY3JlYXRlU29ja2V0LFxuICBTb2NrZXQsXG4gIEFkZHJlc3NJbmZvLFxufSBmcm9tICdkZ3JhbSc7XG5pbXBvcnQge1xuICBFdmVudEVtaXR0ZXIsXG59IGZyb20gJ2V2ZW50cyc7XG5pbXBvcnQge1xuICBTdWJzY3JpYmVyLFxufSBmcm9tICcuLi9pbnRlcmZhY2VzJztcblxuLyoqXG4gKiBTaW1wbGUgcHJvbWlzYWJsZSB1ZHAgc29ja2V0XG4gKi9cbmV4cG9ydCBjbGFzcyBBc3luY1NvY2tldCB7XG4gIHByaXZhdGUgc29ja2V0OiBTb2NrZXQ7XG4gIHByb3RlY3RlZCBldmVudHM6IEV2ZW50RW1pdHRlciA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgaXNDb25uZWN0ZWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuc29ja2V0ID8gdHJ1ZSA6IGZhbHNlO1xuICB9XG4gIGNvbm5lY3QocG9ydDogbnVtYmVyID0gMCAvKiBPUyBhc3NpZ25lZCBwb3J0ICovKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlPEFkZHJlc3NJbmZvPigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBpZiAodGhpcy5pc0Nvbm5lY3RlZCgpKSB7XG4gICAgICAgIHJlc29sdmUodGhpcy5zb2NrZXQuYWRkcmVzcygpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuc29ja2V0ID0gY3JlYXRlU29ja2V0KCd1ZHA0JylcbiAgICAgICAgICAub24oJ21lc3NhZ2UnLCAocmF3OiBCdWZmZXIsIHJlbW90ZSkgPT4ge1xuICAgICAgICAgICAgdGhpcy5ldmVudHMuZW1pdCgncmF3JywgcmF3LCByZW1vdGUpO1xuICAgICAgICAgIH0pXG4gICAgICAgICAgLm9uY2UoJ2Nsb3NlJywgKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5zb2NrZXQgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAvLyByZW1vdmUgYWxsIHVzZWQgbGlzdGVuZXJzXG4gICAgICAgICAgICB0aGlzLmV2ZW50cy5yZW1vdmVBbGxMaXN0ZW5lcnMoKTtcbiAgICAgICAgICB9KVxuICAgICAgICAgIC5vbmNlKCdlcnJvcicsIChlcnIpID0+IHtcbiAgICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICAgIH0pXG4gICAgICAgICAgLm9uY2UoJ2xpc3RlbmluZycsICgpID0+IHtcbiAgICAgICAgICAgIHJlc29sdmUodGhpcy5zb2NrZXQuYWRkcmVzcygpKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5zb2NrZXQuYmluZChwb3J0KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICBjb21wbGV0ZTxUPihjYj86ICgpID0+IFQpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2U8VD4oKHJlc29sdmUpID0+IHtcbiAgICAgIGlmICh0aGlzLmlzQ29ubmVjdGVkKCkpIHtcbiAgICAgICAgdGhpcy5zb2NrZXQub25jZSgnY2xvc2UnLCAoKSA9PiB7XG4gICAgICAgICAgcmVzb2x2ZSh0eXBlb2YgY2IgPT09ICdmdW5jdGlvbicgPyBjYigpIDogdW5kZWZpbmVkKTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXNvbHZlKHR5cGVvZiBjYiA9PT0gJ2Z1bmN0aW9uJyA/IGNiKCkgOiB1bmRlZmluZWQpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIGRpc2Nvbm5lY3Q8VD4oY2I/OiAoKSA9PiBUKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlPFQ+KChyZXNvbHZlKSA9PiB7XG4gICAgICBpZiAodGhpcy5pc0Nvbm5lY3RlZCgpKSB7XG4gICAgICAgIHRoaXMuc29ja2V0Lm9uY2UoJ2Nsb3NlJywgKCkgPT4ge1xuICAgICAgICAgIHJlc29sdmUodHlwZW9mIGNiID09PSAnZnVuY3Rpb24nID8gY2IoKSA6IHVuZGVmaW5lZCk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnNvY2tldC5jbG9zZSgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzb2x2ZSh0eXBlb2YgY2IgPT09ICdmdW5jdGlvbicgPyBjYigpIDogdW5kZWZpbmVkKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICBzZW5kKGhvc3Q6IHN0cmluZywgcG9ydDogbnVtYmVyLCBkYXRhKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlPHZvaWQ+KChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGlmICh0aGlzLmlzQ29ubmVjdGVkKCkpIHtcbiAgICAgICAgdGhpcy5zb2NrZXQuc2VuZChkYXRhLCBwb3J0LCBob3N0LCAoZXJyLCBieXRlcykgPT4ge1xuICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoYnl0ZXMgIT09IGRhdGEubGVuZ3RoKSB7XG4gICAgICAgICAgICByZWplY3QobmV3IEVycm9yKGBFeHBlY3RlZCB0byBzZW5kICR7ZGF0YS5sZW5ndGh9IGJ5dGVzLCBidXQgc2VudCAke2J5dGVzfWApKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgTm8gY29ubmVjdGlvbmApO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIG9uKGV2ZW50OiAncmF3JywgY2I6IChyYXc6IEJ1ZmZlciwgc2VuZGVyOiBBZGRyZXNzSW5mbykgPT4gdm9pZCk6IFN1YnNjcmliZXI7XG4gIG9uPFQ+KGV2ZW50OiBzdHJpbmcsIGNiOiAocXVlcnk6IFQsIHNlbmRlcjogQWRkcmVzc0luZm8pID0+IHZvaWQpOiBTdWJzY3JpYmVyO1xuICBvbihldmVudDogc3RyaW5nLCBjYjogKC4uLmFyZ3M6IGFueVtdKSA9PiB2b2lkKTogU3Vic2NyaWJlciB7XG4gICAgaWYgKHRoaXMuZXZlbnRzLm9uKGV2ZW50LCBjYikpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHVuc3Vic2NyaWJlOiAoKSA9PiB0aGlzLmV2ZW50cy5yZW1vdmVMaXN0ZW5lcihldmVudCwgY2IpLFxuICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBGYWlsZWQgdG8gc3Vic2NyaWJlYCk7XG4gICAgfVxuICB9XG59XG4iXX0=
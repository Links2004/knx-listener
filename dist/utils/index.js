"use strict";
const os_1 = require("os");
function ip2num(ipString) {
    const ipNumber = ipString.split('.');
    return ((((((+ipNumber[0]) * 256) + (+ipNumber[1])) * 256) + (+ipNumber[2])) * 256) + (+ipNumber[3]);
}
exports.ip2num = ip2num;
function num2ip(ipNumber) {
    let ipString = (ipNumber % 256).toString();
    for (let i = 3; i > 0; i--) {
        ipNumber = Math.floor(ipNumber / 256);
        ipString = ipNumber % 256 + '.' + ipString;
    }
    return ipString;
}
exports.num2ip = num2ip;
function num2mac(macNumber) {
    return String(1e12 + (macNumber)
        .toString(16)).slice(-12).match(/.{1,2}/g).join(':');
}
exports.num2mac = num2mac;
function mac2num(macString) {
    return parseInt(macString.split(':').join(''), 16);
}
exports.mac2num = mac2num;
function getCurrentIp() {
    const ifaces = os_1.networkInterfaces();
    for (const dev in ifaces) {
        for (const details of ifaces[dev]) {
            if (details.family === 'IPv4' && details.internal === false) {
                return details.address;
            }
        }
    }
    throw new Error('Failed to get current ip');
}
exports.getCurrentIp = getCurrentIp;
function sizeOf(value) {
    return Math.ceil(Math.log2(value + 1) / 4) || 1;
}
exports.sizeOf = sizeOf;
function knxAddr2num(addrStr) {
    const m = isKnxAddress(addrStr);
    if (m && m.length > 0) {
        return (((+m[0]) & 0x01f) << 11) + (((+m[1]) & 0x07) << 8) + ((+m[2]) & 0xff);
    }
    throw Error(`Could not encode ${addrStr} address`);
}
exports.knxAddr2num = knxAddr2num;
function num2knxAddr(addrNum, isGroupAddr = true) {
    return [
        (addrNum >> 11) & 0xf,
        isGroupAddr ? (addrNum >> 8) & 0x7 : (addrNum >> 8) & 0xf,
        (addrNum & 0xff)
    ].join(isGroupAddr ? '/' : '.');
}
exports.num2knxAddr = num2knxAddr;
function removeNonPrintable(str) {
    return str.replace(/[^\x20-\x7E]+/g, '');
}
exports.removeNonPrintable = removeNonPrintable;
function noop(..._) { }
exports.noop = noop;
function isIPv4(ipStr) {
    return /(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)/
        .test(ipStr);
}
exports.isIPv4 = isIPv4;
function isKnxAddress(knxStrAddr) {
    return knxStrAddr.split(/[\.\/]/);
}
exports.isKnxAddress = isKnxAddress;
console.log(getCurrentIp());
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdXRpbHMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLDJCQUF1QztBQUV2QyxnQkFBdUIsUUFBZ0I7SUFDckMsTUFBTSxRQUFRLEdBQUcsUUFBUSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNyQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDdkcsQ0FBQztBQUhELHdCQUdDO0FBRUQsZ0JBQXVCLFFBQWdCO0lBQ3JDLElBQUksUUFBUSxHQUFHLENBQUMsUUFBUSxHQUFHLEdBQUcsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQzNDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUM7UUFDM0IsUUFBUSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxHQUFHLEdBQUcsQ0FBQyxDQUFDO1FBQ3RDLFFBQVEsR0FBRyxRQUFRLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxRQUFRLENBQUM7SUFDN0MsQ0FBQztJQUNELE1BQU0sQ0FBQyxRQUFRLENBQUM7QUFDbEIsQ0FBQztBQVBELHdCQU9DO0FBRUQsaUJBQXdCLFNBQWlCO0lBQ3ZDLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxHQUFHLENBQUMsU0FBUyxDQUFDO1NBQzdCLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDekQsQ0FBQztBQUhELDBCQUdDO0FBRUQsaUJBQXdCLFNBQWlCO0lBQ3ZDLE1BQU0sQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDckQsQ0FBQztBQUZELDBCQUVDO0FBRUQ7SUFDRSxNQUFNLE1BQU0sR0FBRyxzQkFBaUIsRUFBRSxDQUFDO0lBQ25DLEdBQUcsQ0FBQyxDQUFDLE1BQU0sR0FBRyxJQUFJLE1BQU0sQ0FBQyxDQUFDLENBQUM7UUFDekIsR0FBRyxDQUFDLENBQUMsTUFBTSxPQUFPLElBQUksTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNsQyxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsTUFBTSxLQUFLLE1BQU0sSUFBSSxPQUFPLENBQUMsUUFBUSxLQUFLLEtBQUssQ0FBQyxDQUFDLENBQUM7Z0JBQzVELE1BQU0sQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDO1lBQ3pCLENBQUM7UUFDSCxDQUFDO0lBQ0gsQ0FBQztJQUNELE1BQU0sSUFBSSxLQUFLLENBQUMsMEJBQTBCLENBQUMsQ0FBQztBQUM5QyxDQUFDO0FBVkQsb0NBVUM7QUFFRCxnQkFBdUIsS0FBYTtJQUNsQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDbEQsQ0FBQztBQUZELHdCQUVDO0FBRUQscUJBQTRCLE9BQWU7SUFDekMsTUFBTSxDQUFDLEdBQUcsWUFBWSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ2hDLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDdEIsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQztJQUNoRixDQUFDO0lBQ0QsTUFBTSxLQUFLLENBQUMsb0JBQW9CLE9BQU8sVUFBVSxDQUFDLENBQUM7QUFDckQsQ0FBQztBQU5ELGtDQU1DO0FBRUQscUJBQTRCLE9BQWUsRUFBRSxXQUFXLEdBQUcsSUFBSTtJQUM3RCxNQUFNLENBQUM7UUFDTCxDQUFDLE9BQU8sSUFBSSxFQUFFLENBQUMsR0FBRyxHQUFHO1FBQ3JCLFdBQVcsR0FBRyxDQUFDLE9BQU8sSUFBSSxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxPQUFPLElBQUksQ0FBQyxDQUFDLEdBQUcsR0FBRztRQUN6RCxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUM7S0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQyxDQUFDO0FBQ3BELENBQUM7QUFMRCxrQ0FLQztBQUVELDRCQUFtQyxHQUFXO0lBQzVDLE1BQU0sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLGdCQUFnQixFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQzNDLENBQUM7QUFGRCxnREFFQztBQUVELGNBQXFCLEdBQUcsQ0FBUSxJQUFJLENBQUM7QUFBckMsb0JBQXFDO0FBRXJDLGdCQUF1QixLQUFhO0lBQ2xDLE1BQU0sQ0FBQyxnS0FBZ0s7U0FDcEssSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ2pCLENBQUM7QUFIRCx3QkFHQztBQUVELHNCQUE2QixVQUFrQjtJQUM3QyxNQUFNLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUNwQyxDQUFDO0FBRkQsb0NBRUM7QUFFRCxPQUFPLENBQUMsR0FBRyxDQUFDLFlBQVksRUFBRSxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBuZXR3b3JrSW50ZXJmYWNlcyB9IGZyb20gJ29zJztcblxuZXhwb3J0IGZ1bmN0aW9uIGlwMm51bShpcFN0cmluZzogc3RyaW5nKSB7XG4gIGNvbnN0IGlwTnVtYmVyID0gaXBTdHJpbmcuc3BsaXQoJy4nKTtcbiAgcmV0dXJuICgoKCgoKCtpcE51bWJlclswXSkgKiAyNTYpICsgKCtpcE51bWJlclsxXSkpICogMjU2KSArICgraXBOdW1iZXJbMl0pKSAqIDI1NikgKyAoK2lwTnVtYmVyWzNdKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG51bTJpcChpcE51bWJlcjogbnVtYmVyKSB7XG4gIGxldCBpcFN0cmluZyA9IChpcE51bWJlciAlIDI1NikudG9TdHJpbmcoKTtcbiAgZm9yIChsZXQgaSA9IDM7IGkgPiAwOyBpLS0pIHtcbiAgICBpcE51bWJlciA9IE1hdGguZmxvb3IoaXBOdW1iZXIgLyAyNTYpO1xuICAgIGlwU3RyaW5nID0gaXBOdW1iZXIgJSAyNTYgKyAnLicgKyBpcFN0cmluZztcbiAgfVxuICByZXR1cm4gaXBTdHJpbmc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBudW0ybWFjKG1hY051bWJlcjogbnVtYmVyKSB7XG4gIHJldHVybiBTdHJpbmcoMWUxMiArIChtYWNOdW1iZXIpXG4gICAgLnRvU3RyaW5nKDE2KSkuc2xpY2UoLTEyKS5tYXRjaCgvLnsxLDJ9L2cpLmpvaW4oJzonKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1hYzJudW0obWFjU3RyaW5nOiBzdHJpbmcpIHtcbiAgcmV0dXJuIHBhcnNlSW50KG1hY1N0cmluZy5zcGxpdCgnOicpLmpvaW4oJycpLCAxNik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRDdXJyZW50SXAoKSB7XG4gIGNvbnN0IGlmYWNlcyA9IG5ldHdvcmtJbnRlcmZhY2VzKCk7XG4gIGZvciAoY29uc3QgZGV2IGluIGlmYWNlcykge1xuICAgIGZvciAoY29uc3QgZGV0YWlscyBvZiBpZmFjZXNbZGV2XSkge1xuICAgICAgaWYgKGRldGFpbHMuZmFtaWx5ID09PSAnSVB2NCcgJiYgZGV0YWlscy5pbnRlcm5hbCA9PT0gZmFsc2UpIHtcbiAgICAgICAgcmV0dXJuIGRldGFpbHMuYWRkcmVzcztcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgdGhyb3cgbmV3IEVycm9yKCdGYWlsZWQgdG8gZ2V0IGN1cnJlbnQgaXAnKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNpemVPZih2YWx1ZTogbnVtYmVyKSB7XG4gIHJldHVybiBNYXRoLmNlaWwoTWF0aC5sb2cyKHZhbHVlICsgMSkgLyA0KSB8fCAxO1xufVxuXG5leHBvcnQgZnVuY3Rpb24ga254QWRkcjJudW0oYWRkclN0cjogc3RyaW5nKSB7XG4gIGNvbnN0IG0gPSBpc0tueEFkZHJlc3MoYWRkclN0cik7XG4gIGlmIChtICYmIG0ubGVuZ3RoID4gMCkge1xuICAgIHJldHVybiAoKCgrbVswXSkgJiAweDAxZikgPDwgMTEpICsgKCgoK21bMV0pICYgMHgwNykgPDwgOCkgKyAoKCttWzJdKSAmIDB4ZmYpO1xuICB9XG4gIHRocm93IEVycm9yKGBDb3VsZCBub3QgZW5jb2RlICR7YWRkclN0cn0gYWRkcmVzc2ApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbnVtMmtueEFkZHIoYWRkck51bTogbnVtYmVyLCBpc0dyb3VwQWRkciA9IHRydWUpIHtcbiAgcmV0dXJuIFtcbiAgICAoYWRkck51bSA+PiAxMSkgJiAweGYsXG4gICAgaXNHcm91cEFkZHIgPyAoYWRkck51bSA+PiA4KSAmIDB4NyA6IChhZGRyTnVtID4+IDgpICYgMHhmLFxuICAgIChhZGRyTnVtICYgMHhmZildLmpvaW4oaXNHcm91cEFkZHIgPyAnLycgOiAnLicpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlTm9uUHJpbnRhYmxlKHN0cjogc3RyaW5nKSB7XG4gIHJldHVybiBzdHIucmVwbGFjZSgvW15cXHgyMC1cXHg3RV0rL2csICcnKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG5vb3AoLi4uXzogYW55W10pIHsgfVxuXG5leHBvcnQgZnVuY3Rpb24gaXNJUHY0KGlwU3RyOiBzdHJpbmcpIHtcbiAgcmV0dXJuIC8oMjVbMC01XXwyWzAtNF1bMC05XXxbMDFdP1swLTldWzAtOV0/KVxcLigyNVswLTVdfDJbMC00XVswLTldfFswMV0/WzAtOV1bMC05XT8pXFwuKDI1WzAtNV18MlswLTRdWzAtOV18WzAxXT9bMC05XVswLTldPylcXC4oMjVbMC01XXwyWzAtNF1bMC05XXxbMDFdP1swLTldWzAtOV0/KS9cbiAgICAudGVzdChpcFN0cik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0tueEFkZHJlc3Moa254U3RyQWRkcjogc3RyaW5nKSB7XG4gIHJldHVybiBrbnhTdHJBZGRyLnNwbGl0KC9bXFwuXFwvXS8pO1xufVxuXG5jb25zb2xlLmxvZyhnZXRDdXJyZW50SXAoKSk7XG4iXX0=
"use strict";
const os_1 = require("os");
function ip2num(ipString) {
    const ipNumber = ipString.split('.');
    return ((((((+ipNumber[0]) * 256) + (+ipNumber[1])) * 256) + (+ipNumber[2])) * 256) + (+ipNumber[3]);
}
exports.ip2num = ip2num;
function num2ip(ipNumber) {
    let ipString = (ipNumber % 256).toString();
    for (let i = 3; i > 0; i--) {
        ipNumber = Math.floor(ipNumber / 256);
        ipString = ipNumber % 256 + '.' + ipString;
    }
    return ipString;
}
exports.num2ip = num2ip;
function num2mac(macNumber) {
    return String(1e12 + (macNumber)
        .toString(16)).slice(-12).match(/.{1,2}/g).join(':');
}
exports.num2mac = num2mac;
function mac2num(macString) {
    return parseInt(macString.split(':').join(''), 16);
}
exports.mac2num = mac2num;
function getCurrentIp() {
    let address;
    const ifaces = os_1.networkInterfaces();
    for (const dev in ifaces) {
        ifaces[dev].filter((details) => details.family === 'IPv4' && details.internal === false ?
            address = details.address : undefined);
    }
    return address;
}
exports.getCurrentIp = getCurrentIp;
function sizeOf(value) {
    return Math.ceil(Math.log2(value + 1) / 4) || 1;
}
exports.sizeOf = sizeOf;
function knxAddr2num(addrStr) {
    const m = isKnxAddress(addrStr);
    if (m && m.length > 0) {
        return (((+m[0]) & 0x01f) << 11) + (((+m[1]) & 0x07) << 8) + ((+m[2]) & 0xff);
    }
    throw Error(`Could not encode ${addrStr} address`);
}
exports.knxAddr2num = knxAddr2num;
function num2knxAddr(addrNum, isGroupAddr = true) {
    return [
        (addrNum >> 11) & 0xf,
        isGroupAddr ? (addrNum >> 8) & 0x7 : (addrNum >> 8) & 0xf,
        (addrNum & 0xff)
    ].join(isGroupAddr ? '/' : '.');
}
exports.num2knxAddr = num2knxAddr;
function removeNonPrintable(str) {
    return str.replace(/[^\x20-\x7E]+/g, '');
}
exports.removeNonPrintable = removeNonPrintable;
function noop(..._) { }
exports.noop = noop;
function isIPv4(ipStr) {
    return /(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)/
        .test(ipStr);
}
exports.isIPv4 = isIPv4;
function isKnxAddress(knxStrAddr) {
    return knxStrAddr.split(/[\.\/]/);
}
exports.isKnxAddress = isKnxAddress;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdXRpbHMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLDJCQUF1QztBQUV2QyxnQkFBdUIsUUFBZ0I7SUFDckMsTUFBTSxRQUFRLEdBQUcsUUFBUSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNyQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDdkcsQ0FBQztBQUhELHdCQUdDO0FBRUQsZ0JBQXVCLFFBQWdCO0lBQ3JDLElBQUksUUFBUSxHQUFHLENBQUMsUUFBUSxHQUFHLEdBQUcsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQzNDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUM7UUFDM0IsUUFBUSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxHQUFHLEdBQUcsQ0FBQyxDQUFDO1FBQ3RDLFFBQVEsR0FBRyxRQUFRLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxRQUFRLENBQUM7SUFDN0MsQ0FBQztJQUNELE1BQU0sQ0FBQyxRQUFRLENBQUM7QUFDbEIsQ0FBQztBQVBELHdCQU9DO0FBRUQsaUJBQXdCLFNBQWlCO0lBQ3ZDLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxHQUFHLENBQUMsU0FBUyxDQUFDO1NBQzdCLFFBQVEs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QUM7QUFDcEMsQ0FBQztBQUZELG9DQUVDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgbmV0d29ya0ludGVyZmFjZXMgfSBmcm9tICdvcyc7XG5cbmV4cG9ydCBmdW5jdGlvbiBpcDJudW0oaXBTdHJpbmc6IHN0cmluZykge1xuICBjb25zdCBpcE51bWJlciA9IGlwU3RyaW5nLnNwbGl0KCcuJyk7XG4gIHJldHVybiAoKCgoKCgraXBOdW1iZXJbMF0pICogMjU2KSArICgraXBOdW1iZXJbMV0pKSAqIDI1NikgKyAoK2lwTnVtYmVyWzJdKSkgKiAyNTYpICsgKCtpcE51bWJlclszXSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBudW0yaXAoaXBOdW1iZXI6IG51bWJlcikge1xuICBsZXQgaXBTdHJpbmcgPSAoaXBOdW1iZXIgJSAyNTYpLnRvU3RyaW5nKCk7XG4gIGZvciAobGV0IGkgPSAzOyBpID4gMDsgaS0tKSB7XG4gICAgaXBOdW1iZXIgPSBNYXRoLmZsb29yKGlwTnVtYmVyIC8gMjU2KTtcbiAgICBpcFN0cmluZyA9IGlwTnVtYmVyICUgMjU2ICsgJy4nICsgaXBTdHJpbmc7XG4gIH1cbiAgcmV0dXJuIGlwU3RyaW5nO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbnVtMm1hYyhtYWNOdW1iZXI6IG51bWJlcikge1xuICByZXR1cm4gU3RyaW5nKDFlMTIgKyAobWFjTnVtYmVyKVxuICAgIC50b1N0cmluZygxNikpLnNsaWNlKC0xMikubWF0Y2goLy57MSwyfS9nKS5qb2luKCc6Jyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtYWMybnVtKG1hY1N0cmluZzogc3RyaW5nKSB7XG4gIHJldHVybiBwYXJzZUludChtYWNTdHJpbmcuc3BsaXQoJzonKS5qb2luKCcnKSwgMTYpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0Q3VycmVudElwKCkge1xuICBsZXQgYWRkcmVzcztcbiAgY29uc3QgaWZhY2VzID0gbmV0d29ya0ludGVyZmFjZXMoKTtcbiAgZm9yIChjb25zdCBkZXYgaW4gaWZhY2VzKSB7XG4gICAgaWZhY2VzW2Rldl0uZmlsdGVyKChkZXRhaWxzKSA9PlxuICAgICAgZGV0YWlscy5mYW1pbHkgPT09ICdJUHY0JyAmJiBkZXRhaWxzLmludGVybmFsID09PSBmYWxzZSA/XG4gICAgICAgIGFkZHJlc3MgPSBkZXRhaWxzLmFkZHJlc3MgOiB1bmRlZmluZWQpO1xuICB9XG4gIHJldHVybiBhZGRyZXNzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2l6ZU9mKHZhbHVlOiBudW1iZXIpIHtcbiAgcmV0dXJuIE1hdGguY2VpbChNYXRoLmxvZzIodmFsdWUgKyAxKSAvIDQpIHx8IDE7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBrbnhBZGRyMm51bShhZGRyU3RyOiBzdHJpbmcpIHtcbiAgY29uc3QgbSA9IGlzS254QWRkcmVzcyhhZGRyU3RyKTtcbiAgaWYgKG0gJiYgbS5sZW5ndGggPiAwKSB7XG4gICAgcmV0dXJuICgoKCttWzBdKSAmIDB4MDFmKSA8PCAxMSkgKyAoKCgrbVsxXSkgJiAweDA3KSA8PCA4KSArICgoK21bMl0pICYgMHhmZik7XG4gIH1cbiAgdGhyb3cgRXJyb3IoYENvdWxkIG5vdCBlbmNvZGUgJHthZGRyU3RyfSBhZGRyZXNzYCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBudW0ya254QWRkcihhZGRyTnVtOiBudW1iZXIsIGlzR3JvdXBBZGRyID0gdHJ1ZSkge1xuICByZXR1cm4gW1xuICAgIChhZGRyTnVtID4+IDExKSAmIDB4ZixcbiAgICBpc0dyb3VwQWRkciA/IChhZGRyTnVtID4+IDgpICYgMHg3IDogKGFkZHJOdW0gPj4gOCkgJiAweGYsXG4gICAgKGFkZHJOdW0gJiAweGZmKV0uam9pbihpc0dyb3VwQWRkciA/ICcvJyA6ICcuJyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZW1vdmVOb25QcmludGFibGUoc3RyOiBzdHJpbmcpIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC9bXlxceDIwLVxceDdFXSsvZywgJycpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbm9vcCguLi5fOiBhbnlbXSkgeyB9XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0lQdjQoaXBTdHI6IHN0cmluZykge1xuICByZXR1cm4gLygyNVswLTVdfDJbMC00XVswLTldfFswMV0/WzAtOV1bMC05XT8pXFwuKDI1WzAtNV18MlswLTRdWzAtOV18WzAxXT9bMC05XVswLTldPylcXC4oMjVbMC01XXwyWzAtNF1bMC05XXxbMDFdP1swLTldWzAtOV0/KVxcLigyNVswLTVdfDJbMC00XVswLTldfFswMV0/WzAtOV1bMC05XT8pL1xuICAgIC50ZXN0KGlwU3RyKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzS254QWRkcmVzcyhrbnhTdHJBZGRyOiBzdHJpbmcpIHtcbiAgcmV0dXJuIGtueFN0ckFkZHIuc3BsaXQoL1tcXC5cXC9dLyk7XG59XG4iXX0=